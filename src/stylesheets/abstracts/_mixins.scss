@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin title {
  color: $middle-grey;
  text-transform: uppercase;
  font-weight: 600;
  font-size: 14px;
}

@mixin subtitle {
  font-size: 20px;
  text-transform: uppercase;
  margin-top: 15px;
  font-weight: 600;
  margin-bottom: 40px;
}

@mixin violet-line {
  border-top: 4px solid $third-color;
  margin-left: 0;
  margin-top: 10px;
  width: 30px;
}



@mixin green-line {
  border-top: 4px solid $primary-color;
  margin-left: 0;
  margin-top: 10px;
  width: 30px;
}

@mixin purple-line {
  border-top: 4px solid $secondary-color;
  margin-left: 0;
  width: 30px;
}

// center vertically and/or horizontally an absolute positioned element
@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    transform: translateX(-50%) translateY(-50%);
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  }
}

@mixin truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin icomoon($icon, $position: "before", $replace: false) {
  // If we're replacing the text, set font-size to 0
  @if $replace {
    font-size: 0;
  }
  // Pseudo-element properties
  &:#{$position} {
    @extend .icon-#{$icon};
    font-family: 'icomoon';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    @if $replace {
      font-size: 1rem;
    }
    @content;
  }
}


// THEMIFY
// -------
// Loops through each theme within $themes to create a variable that
// can be used output values stored within it.
//
// - $attr  : <string>
//      Attribute selector for theme. Defaults null.
//      When given, selector defaults to &[data-#{$attr}]
//      When null, selector defaults to #{theme} &
//
// - $themes: <map>
//      Map for which themes are location. Defaults to $themes
//
// Note: When a new property is added, you have to define the theme color like
// in the examples below. (Until Sass allows us to create dynamic variables...)
// =======

$current-theme: null !default;
@mixin themify($attr: null, $themes: $themes) {
  @each $theme, $map in $themes {

    // Define current theme
    $current-theme: map-get($themes, $theme) !global;

    // Themify
    @if $attr == null {
      .#{$theme} & { @content; }
    } @else {
      &[data-#{$attr}="#{$theme}"] { @content; }
    }
    
    // reset current theme
    $current-theme: null !global;
  }
}
@function theme($query, $theme: $current-theme) {
  @return map-get($theme, $query);
}